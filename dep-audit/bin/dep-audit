#!/usr/bin/env node
/*
Copyright 2016, Yahoo Inc.
Code licensed under the MIT License.
See LICENSE.txt
*/

// support early versions of node 6
if (process.stdout._handle && process.stdout._handle.setBlocking) process.stdout._handle.setBlocking(true)
if (process.stderr._handle && process.stderr._handle.setBlocking) process.stderr._handle.setBlocking(true)

var path = require('path')
var audit = require('../index')
var request = require('request')
var argv = require('yargs')
.usage('Usage:\n$0 --config <path to config file> [options]' +
  '\n$0 --config-url <url> [options]')
.config()
.describe({'config-url': 'URL to JSON config file',
  'hook': 'Path to hook to execute on modules before auditing',
  'fix': 'Attempt to fix incorrect licenses',
  'guess': 'Attempt to guess licenses from files other than package.json'})
.string(['config', 'config-url', 'hook'])
.boolean(['fix', 'guess', 'version'])
.version()
.help()
.argv

if (argv['config-url']) {
  request.get({
    uri: argv['config-url'],
    json: true
  }, function (err, res, body) {
    if (err) {
      console.error('Could not fetch config file')
      process.exit(2)
    } else if (res.statusCode === 200) {
      checkDependencies(body)
    }
  })
} else if (argv.config) {
  checkDependencies(require(path.resolve(process.cwd(), argv.config)))
}

function checkDependencies (body) {
  var opts = {
    checker:
      {start: process.cwd(),
      production: true,
      unknown: !argv.guess},
    fix: argv.fix,
    spdx: (body || argv).spdx,
    include: (body || argv).inclusions || {},
    exclude: (body || argv).exclusions || {}
  }
  if (argv.hook) {
    opts.hook = require(path.resolve(process.cwd(), argv.hook))
  }

  audit(opts, function (error, report) {
    if (error) {
      console.error(error)
      process.exit(1)
    }

    if (Object.keys(report.fail).length) {
      console.error('The following packages violate the policy:')
      Object.keys(report.fail).forEach(function (nameVersion) {
        var reason = report.fail[nameVersion]
        if (typeof reason === 'string') {
          console.error('  ' + nameVersion + '    license', JSON.stringify(reason), 'not allowed by policy')
        } else {
          console.error('  ' + nameVersion + '    ' + reason.desc, '(' + JSON.stringify(reason.audit_trail) + ')')
        }
      })
      process.exit(1)
    }

    console.log('All modules are allowed!')
  })
}
