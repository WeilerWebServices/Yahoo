//
// This file is generated by parsec_rdl 0.0.38 2016-01-04T12:01:04Z
// Please DO NOT edit directly; changes could be overwritten.
//
package com.example.parsec_generated;

import javax.ws.rs.*;
import javax.ws.rs.core.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.inject.Inject;
import javax.ws.rs.container.AsyncResponse;
import javax.ws.rs.container.Suspended;
import javax.inject.Named;
import javax.validation.Valid;
import javax.validation.groups.ConvertGroup;
import javax.validation.groups.Default;


@Path("/sample/v1")
public class SampleResources {

    @GET
    @Path("/users/{id}")
    @Produces(MediaType.APPLICATION_JSON)
    public User getUser(
        @PathParam("id") Integer id
    ) {
        try {
            ResourceContext context = _delegate.newResourceContext(_request, _response);
            User e = _delegate.getUser(context, id);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.INTERNAL_SERVER_ERROR:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception ("+code+") for resource getUser");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @POST
    @Path("/users")
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    public String postUser(
        @Valid @ConvertGroup(from = Default.class, to = ParsecValidationGroups.Insert.class) User user
    ) {
        try {
            ResourceContext context = _delegate.newResourceContext(_request, _response);
            String e = _delegate.postUser(context, user);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.INTERNAL_SERVER_ERROR:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception ("+code+") for resource postUser");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @PUT
    @Path("/users/{id}")
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    public String putUser(
        @Named("namedId") @PathParam("id") Integer id, 
        @Valid @ConvertGroup(from = Default.class, to = ParsecValidationGroups.Update.class) @Named("namedUser") User user
    ) {
        try {
            ResourceContext context = _delegate.newResourceContext(_request, _response);
            String e = _delegate.putUser(context, id, user);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.INTERNAL_SERVER_ERROR:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception ("+code+") for resource putUser");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }


    WebApplicationException typedException(int code, ResourceException e, Class<?> eClass) {
        Object data = e.getData();
        Object entity = eClass.isInstance(data)? data : null;
        if (entity != null)
            return new WebApplicationException(Response.status(code).entity(entity).build());
        else
            return new WebApplicationException(code);
    }

    @Inject private SampleHandler _delegate;
    @Context private HttpServletRequest _request;
    @Context private HttpServletResponse _response;

}
