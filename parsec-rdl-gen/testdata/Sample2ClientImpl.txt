//
// This file is generated by test
// WILL NOT be auto-generated if file has already existed.
//
package com.example.parsec_generated;

import com.example.parsec_generated.ResourceException;
import com.example.parsec_generated.User;

import com.ning.http.client.AsyncHandler;
import com.yahoo.parsec.clients.DefaultAsyncCompletionHandler;
import com.yahoo.parsec.clients.ParsecAsyncHttpClient;
import com.yahoo.parsec.clients.ParsecAsyncHttpRequest;
import com.yahoo.parsec.clients.ParsecAsyncHttpRequest.Builder;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.ws.rs.core.UriBuilder;
import java.net.URI;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;

public class SampleClientImpl implements SampleClient {

    /** Logger. */
    private static final Logger LOGGER = LoggerFactory.getLogger(SampleClientImpl.class);

    /** ParsecAsyncHttpClient. */
    private final ParsecAsyncHttpClient parsecAsyncHttpClient;

    /** Object mapper */
    private final ObjectMapper objectMapper;

    /** URL. */
    private String url;

    /** Headers. */
    private final Map<String, List<String>> defaultHeaders;

    /**
     * connection timeout.
     */
    private static final int IDLE_CONNECTION_TIMEOUT_IN_MS = 15000;

    /**
     * total connections.
     */
    private static final int MAXIMUM_CONNECTIONS_TOTAL = 50;

    public SampleClientImpl(String url) {
        this(url, null);
    }

    public SampleClientImpl(
        String url,
        Map<String, List<String>> headers
    ) {

        this.parsecAsyncHttpClient = new ParsecAsyncHttpClient.Builder()
                .setAcceptAnyCertificate(true)
                .setAllowPoolingConnections(true)
                .setPooledConnectionIdleTimeout(IDLE_CONNECTION_TIMEOUT_IN_MS)
                .setMaxConnections(MAXIMUM_CONNECTIONS_TOTAL)
                .build();
        this.objectMapper = new ObjectMapper();
        this.url = url;
        this.defaultHeaders = headers;
    }

    public SampleClientImpl(
            ParsecAsyncHttpClient client,
            ObjectMapper objectMapper,
            String url,
            Map<String, List<String>> headers
    ) {
        this.parsecAsyncHttpClient = client;
        this.objectMapper = objectMapper;
        this.url = url;
        this.defaultHeaders = headers;
    }

    private ParsecAsyncHttpRequest getRequest(
            String method,
            Map<String, List<String>> headers,
            URI uri,
            String body
    ) throws ResourceException {
        Builder builder = new Builder();

        builder.setUri(uri);
        if (headers != null) {
            for (Map.Entry<String, List<String>> entry : headers.entrySet()) {
                String headerKey = entry.getKey();
                for (String headerValue: entry.getValue()) {
                    builder.addHeader(headerKey, headerValue);
                }
            }
        }

        builder.setMethod(method);

        builder.setBody(body).setBodyEncoding("UTF-8");

        ParsecAsyncHttpRequest request = null;
        try {
            request = builder.build();
        } catch (Exception e) {
            LOGGER.error("builder build failed: " + e.getMessage());
            throw new ResourceException(ResourceException.INTERNAL_SERVER_ERROR, e.getMessage());
        }
        return request;
    }

    public Map<String, List<String>> getDefaultHeaders() {
        return defaultHeaders;
    }

    @Override
    public CompletableFuture<User> getUserId(Integer id) throws ResourceException {
        return getUserId(Collections.emptyMap(), id);
    }

    @Override
    public CompletableFuture<User> getUserId(Map<String, List<String>> headers, Integer id) throws ResourceException {
        String xPath = "/user/{id}";
        String xBody = null;

        UriBuilder xUriBuilder = UriBuilder.fromUri(this.url).path(xPath);
        xUriBuilder.resolveTemplate("id", id);
        URI xUri = xUriBuilder.build();
        if (headers == null) {
            headers = getDefaultHeaders();
        }
        ParsecAsyncHttpRequest xRequest = getRequest("GET", headers, xUri, xBody);


        AsyncHandler<User> xAsyncHandler = new DefaultAsyncCompletionHandler<>(User.class);

        return parsecAsyncHttpClient.criticalExecute(xRequest, xAsyncHandler);
    }

    @Override
    public CompletableFuture<User> fetchWssid() throws ResourceException {
        return fetchWssid(Collections.emptyMap());
    }

    @Override
    public CompletableFuture<User> fetchWssid(Map<String, List<String>> headers) throws ResourceException {
        String xPath = "/wssid";
        String xBody = null;

        UriBuilder xUriBuilder = UriBuilder.fromUri(this.url).path(xPath);
        URI xUri = xUriBuilder.build();
        if (headers == null) {
            headers = getDefaultHeaders();
        }
        ParsecAsyncHttpRequest xRequest = getRequest("POST", headers, xUri, xBody);


        AsyncHandler<User> xAsyncHandler = new DefaultAsyncCompletionHandler<>(User.class);

        return parsecAsyncHttpClient.criticalExecute(xRequest, xAsyncHandler);
    }

}
